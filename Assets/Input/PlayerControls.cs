//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Mech"",
            ""id"": ""ebda69a6-97cf-49d0-9de3-61c86da24e59"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""322211bc-d52b-4dcb-a053-7b332ba2309b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""7a221219-2fdd-4fe6-b67c-eb3cd274b746"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""02599f40-c85f-47d5-955e-89ec4472d3de"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f0db64f5-2fc2-4829-909f-a3ec36b512f4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LazerFire"",
                    ""type"": ""Button"",
                    ""id"": ""1440a839-cbef-4785-bfca-ad18ce8d36aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MissileFire"",
                    ""type"": ""Button"",
                    ""id"": ""63fc8695-0de3-43ce-b595-caadbc456e53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReadyLazer"",
                    ""type"": ""Button"",
                    ""id"": ""23aff37f-8074-48eb-bab6-b615d6ac180c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReadySight"",
                    ""type"": ""Button"",
                    ""id"": ""db436f2a-dfc3-4e5f-a8df-8d58aa5c7cb6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Board"",
                    ""type"": ""Button"",
                    ""id"": ""1c8e6a53-a5c4-4f4b-9b03-22d141e12d4e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HideUI"",
                    ""type"": ""Button"",
                    ""id"": ""25145e69-6ae0-4e69-b3e7-ab167d246605"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""c5aa915f-abe8-468f-b2da-948cd74ea57b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""91dbeb0e-9f8a-46c6-b082-3e7c4100ca0e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3b9ac9c9-e268-4247-8c92-9a13d9a319cf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f3ca0d82-4ae8-48ff-a57e-3aa0a2baa094"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0ceeb97a-5261-4319-a3f0-02a17e220bba"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d8f13bf8-1e72-467d-b79d-92300a31c0f4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d2fe74d-5c50-46d8-8629-37c9dbefea09"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3d6589a-c247-4891-a522-649f24585923"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false)"",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75fab8ff-96e3-40db-a96a-b4dbd7355f77"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MissileFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a911dee-eb69-4394-a7e1-c453310648de"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""LazerFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b551efcf-fc1d-495b-ad72-92c7ce73827e"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""ReadyLazer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3cabcd9b-ab48-4229-87f5-d8221e8e22c0"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""ReadySight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60543eff-356b-48b0-9c18-404a0b908086"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Board"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65ecc660-ee4e-4bb2-a17e-84cc1a2772fb"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""HideUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Train"",
            ""id"": ""bd5a0763-a024-4b29-b395-6fc78ceb5b72"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7cbe47fd-a311-48a2-83e5-fae19b898691"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""39cd2d4c-132d-4f93-8816-f93fdb39ced1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Board"",
                    ""type"": ""Button"",
                    ""id"": ""00000e8a-e3ae-4b07-adcc-95b812395615"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HideUI"",
                    ""type"": ""Button"",
                    ""id"": ""2fd5d445-23ef-4036-8bcb-96c32d7066a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""5d513f40-2055-490d-9106-c02b7696a96f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bb1dec6d-be1a-4a89-ad88-ab2e45ae0b21"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4eaf440a-49dc-4c93-bb13-5f7d872356fa"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4487cab6-d55b-4620-8a00-30ca9f896116"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""519c3e78-fcba-451f-b5bf-8e3074e317a5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""24d35377-3de9-4548-acf9-16ea416a3648"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false)"",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f93238a-fa36-4960-a560-d213b358eb76"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Board"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4799123a-667c-4128-b137-4d021529dee0"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""HideUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Mech
        m_Mech = asset.FindActionMap("Mech", throwIfNotFound: true);
        m_Mech_Move = m_Mech.FindAction("Move", throwIfNotFound: true);
        m_Mech_Look = m_Mech.FindAction("Look", throwIfNotFound: true);
        m_Mech_Jump = m_Mech.FindAction("Jump", throwIfNotFound: true);
        m_Mech_Sprint = m_Mech.FindAction("Sprint", throwIfNotFound: true);
        m_Mech_LazerFire = m_Mech.FindAction("LazerFire", throwIfNotFound: true);
        m_Mech_MissileFire = m_Mech.FindAction("MissileFire", throwIfNotFound: true);
        m_Mech_ReadyLazer = m_Mech.FindAction("ReadyLazer", throwIfNotFound: true);
        m_Mech_ReadySight = m_Mech.FindAction("ReadySight", throwIfNotFound: true);
        m_Mech_Board = m_Mech.FindAction("Board", throwIfNotFound: true);
        m_Mech_HideUI = m_Mech.FindAction("HideUI", throwIfNotFound: true);
        // Train
        m_Train = asset.FindActionMap("Train", throwIfNotFound: true);
        m_Train_Move = m_Train.FindAction("Move", throwIfNotFound: true);
        m_Train_Look = m_Train.FindAction("Look", throwIfNotFound: true);
        m_Train_Board = m_Train.FindAction("Board", throwIfNotFound: true);
        m_Train_HideUI = m_Train.FindAction("HideUI", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mech
    private readonly InputActionMap m_Mech;
    private IMechActions m_MechActionsCallbackInterface;
    private readonly InputAction m_Mech_Move;
    private readonly InputAction m_Mech_Look;
    private readonly InputAction m_Mech_Jump;
    private readonly InputAction m_Mech_Sprint;
    private readonly InputAction m_Mech_LazerFire;
    private readonly InputAction m_Mech_MissileFire;
    private readonly InputAction m_Mech_ReadyLazer;
    private readonly InputAction m_Mech_ReadySight;
    private readonly InputAction m_Mech_Board;
    private readonly InputAction m_Mech_HideUI;
    public struct MechActions
    {
        private @PlayerControls m_Wrapper;
        public MechActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Mech_Move;
        public InputAction @Look => m_Wrapper.m_Mech_Look;
        public InputAction @Jump => m_Wrapper.m_Mech_Jump;
        public InputAction @Sprint => m_Wrapper.m_Mech_Sprint;
        public InputAction @LazerFire => m_Wrapper.m_Mech_LazerFire;
        public InputAction @MissileFire => m_Wrapper.m_Mech_MissileFire;
        public InputAction @ReadyLazer => m_Wrapper.m_Mech_ReadyLazer;
        public InputAction @ReadySight => m_Wrapper.m_Mech_ReadySight;
        public InputAction @Board => m_Wrapper.m_Mech_Board;
        public InputAction @HideUI => m_Wrapper.m_Mech_HideUI;
        public InputActionMap Get() { return m_Wrapper.m_Mech; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MechActions set) { return set.Get(); }
        public void SetCallbacks(IMechActions instance)
        {
            if (m_Wrapper.m_MechActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_MechActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MechActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MechActionsCallbackInterface.OnMove;
                @Look.started -= m_Wrapper.m_MechActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_MechActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_MechActionsCallbackInterface.OnLook;
                @Jump.started -= m_Wrapper.m_MechActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MechActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MechActionsCallbackInterface.OnJump;
                @Sprint.started -= m_Wrapper.m_MechActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_MechActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_MechActionsCallbackInterface.OnSprint;
                @LazerFire.started -= m_Wrapper.m_MechActionsCallbackInterface.OnLazerFire;
                @LazerFire.performed -= m_Wrapper.m_MechActionsCallbackInterface.OnLazerFire;
                @LazerFire.canceled -= m_Wrapper.m_MechActionsCallbackInterface.OnLazerFire;
                @MissileFire.started -= m_Wrapper.m_MechActionsCallbackInterface.OnMissileFire;
                @MissileFire.performed -= m_Wrapper.m_MechActionsCallbackInterface.OnMissileFire;
                @MissileFire.canceled -= m_Wrapper.m_MechActionsCallbackInterface.OnMissileFire;
                @ReadyLazer.started -= m_Wrapper.m_MechActionsCallbackInterface.OnReadyLazer;
                @ReadyLazer.performed -= m_Wrapper.m_MechActionsCallbackInterface.OnReadyLazer;
                @ReadyLazer.canceled -= m_Wrapper.m_MechActionsCallbackInterface.OnReadyLazer;
                @ReadySight.started -= m_Wrapper.m_MechActionsCallbackInterface.OnReadySight;
                @ReadySight.performed -= m_Wrapper.m_MechActionsCallbackInterface.OnReadySight;
                @ReadySight.canceled -= m_Wrapper.m_MechActionsCallbackInterface.OnReadySight;
                @Board.started -= m_Wrapper.m_MechActionsCallbackInterface.OnBoard;
                @Board.performed -= m_Wrapper.m_MechActionsCallbackInterface.OnBoard;
                @Board.canceled -= m_Wrapper.m_MechActionsCallbackInterface.OnBoard;
                @HideUI.started -= m_Wrapper.m_MechActionsCallbackInterface.OnHideUI;
                @HideUI.performed -= m_Wrapper.m_MechActionsCallbackInterface.OnHideUI;
                @HideUI.canceled -= m_Wrapper.m_MechActionsCallbackInterface.OnHideUI;
            }
            m_Wrapper.m_MechActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @LazerFire.started += instance.OnLazerFire;
                @LazerFire.performed += instance.OnLazerFire;
                @LazerFire.canceled += instance.OnLazerFire;
                @MissileFire.started += instance.OnMissileFire;
                @MissileFire.performed += instance.OnMissileFire;
                @MissileFire.canceled += instance.OnMissileFire;
                @ReadyLazer.started += instance.OnReadyLazer;
                @ReadyLazer.performed += instance.OnReadyLazer;
                @ReadyLazer.canceled += instance.OnReadyLazer;
                @ReadySight.started += instance.OnReadySight;
                @ReadySight.performed += instance.OnReadySight;
                @ReadySight.canceled += instance.OnReadySight;
                @Board.started += instance.OnBoard;
                @Board.performed += instance.OnBoard;
                @Board.canceled += instance.OnBoard;
                @HideUI.started += instance.OnHideUI;
                @HideUI.performed += instance.OnHideUI;
                @HideUI.canceled += instance.OnHideUI;
            }
        }
    }
    public MechActions @Mech => new MechActions(this);

    // Train
    private readonly InputActionMap m_Train;
    private ITrainActions m_TrainActionsCallbackInterface;
    private readonly InputAction m_Train_Move;
    private readonly InputAction m_Train_Look;
    private readonly InputAction m_Train_Board;
    private readonly InputAction m_Train_HideUI;
    public struct TrainActions
    {
        private @PlayerControls m_Wrapper;
        public TrainActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Train_Move;
        public InputAction @Look => m_Wrapper.m_Train_Look;
        public InputAction @Board => m_Wrapper.m_Train_Board;
        public InputAction @HideUI => m_Wrapper.m_Train_HideUI;
        public InputActionMap Get() { return m_Wrapper.m_Train; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TrainActions set) { return set.Get(); }
        public void SetCallbacks(ITrainActions instance)
        {
            if (m_Wrapper.m_TrainActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_TrainActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_TrainActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_TrainActionsCallbackInterface.OnMove;
                @Look.started -= m_Wrapper.m_TrainActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_TrainActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_TrainActionsCallbackInterface.OnLook;
                @Board.started -= m_Wrapper.m_TrainActionsCallbackInterface.OnBoard;
                @Board.performed -= m_Wrapper.m_TrainActionsCallbackInterface.OnBoard;
                @Board.canceled -= m_Wrapper.m_TrainActionsCallbackInterface.OnBoard;
                @HideUI.started -= m_Wrapper.m_TrainActionsCallbackInterface.OnHideUI;
                @HideUI.performed -= m_Wrapper.m_TrainActionsCallbackInterface.OnHideUI;
                @HideUI.canceled -= m_Wrapper.m_TrainActionsCallbackInterface.OnHideUI;
            }
            m_Wrapper.m_TrainActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Board.started += instance.OnBoard;
                @Board.performed += instance.OnBoard;
                @Board.canceled += instance.OnBoard;
                @HideUI.started += instance.OnHideUI;
                @HideUI.performed += instance.OnHideUI;
                @HideUI.canceled += instance.OnHideUI;
            }
        }
    }
    public TrainActions @Train => new TrainActions(this);
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    public interface IMechActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnLazerFire(InputAction.CallbackContext context);
        void OnMissileFire(InputAction.CallbackContext context);
        void OnReadyLazer(InputAction.CallbackContext context);
        void OnReadySight(InputAction.CallbackContext context);
        void OnBoard(InputAction.CallbackContext context);
        void OnHideUI(InputAction.CallbackContext context);
    }
    public interface ITrainActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnBoard(InputAction.CallbackContext context);
        void OnHideUI(InputAction.CallbackContext context);
    }
}
